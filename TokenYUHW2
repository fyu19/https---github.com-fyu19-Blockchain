// SPDX-License-Identifier: MIT
// Compatible with OpenZeppelin Contracts ^5.0.0
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";


contract Token is ERC20 {
    address public master;
    address public censor;
    //Map of the blacklist
    mapping(address => bool) public blacklist;


    //Constructor, called when generating the contract, initialize master and censor to the one who called it
    //And give 100 millions to him
    constructor() ERC20("Token", "YU"){
        master = msg.sender;
        censor = msg.sender;
        _mint(msg.sender, 100000000 * 10 ** 18);
    }

    //Modifier so that only master can execute some functions
    modifier onlyMaster(){
        require(msg.sender == master, "You are not the owner, trou du cul");
        _;
    }

    //Modifier so that only master and censor can execute some functions
    modifier onlyMasterOrCensor(){
        require(msg.sender == master || msg.sender == censor,"Out of here");
        _;
    }

    //Modifier so that blacklisted people cannot transfer or receive anything
    modifier noBlacklisted(address senderOrReceiver){
        require(blacklist[senderOrReceiver] != true, "Blacklisted hahaha");
        _;
    }

    //Function to changeMaster, works only if it is called by master
    function changeMaster(address newMaster) external onlyMaster() {
        master = newMaster;
    }

    //Function to changeCensor, works only if called by master
    function changeCensor(address newCensor) external onlyMaster() {
        censor = newCensor;
    }

    //Function to blacklist or unblacklist someone, works only if called by master or censor
    function setBlacklist(address target, bool blacklisted) external onlyMasterOrCensor{
        blacklist[target] = blacklisted;
    }

    //Function to send the specific amount to master's adsress from the target address, can only be called by him
    function clawBack(address target, uint256 amount) external onlyMaster(){
        _transfer(target, master, amount);
    }


    //Function to mint to the target's adress, can only be executed by master
    function mint(address target, uint256 amount) external onlyMaster() noBlacklisted(target){
        _mint(target,amount);
    }

    //Function to burn a certain amount from the target's address, can only be executed by master
    function burn(address target, uint256 amount) external onlyMaster() noBlacklisted(target){
        _burn(target,amount);
    }

    //Function to transfer money 
    function transfer(address receiver, uint256 amount) public override noBlacklisted(receiver) noBlacklisted(msg.sender) returns (bool){
        _transfer(msg.sender,receiver,amount);
        return true;
    }
    }
